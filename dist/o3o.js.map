{"version":3,"sources":["../libs/o3o.js"],"names":[],"mappings":";;;;;;;;;;;;;;qBAkBwB,GAAG;;;;sBATR,QAAQ;;;;uBACE,aAAa;;;;;;;;;AAQ3B,SAAS,GAAG,CAAC,IAAI,EAAE;AAChC,MAAI,SAAS,GAAG,YAAY,EAAE,CAAA;;AAE9B,MAAI,CAAC,IAAI,EACP,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;;AAE/B,MAAI,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,GAAG,EACnC,OAAO,eAAe,CAAC,SAAS,CAAC,CAAA;;AAEnC,MAAI,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,EAClC,OAAO,IAAI,CAAA;;AAEb,SAAO,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAA;CACpC;;;;;;;AAOD,SAAS,YAAY,GAAG;AACtB,MAAI,KAAK,GAAG,EAAE,CAAA;;AAEd,MAAI,CAAC,OAAO,CAAC,UAAA,IAAI,EAAI;AACnB,QAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;AACjC,WAAK,CAAC,GAAG,CAAC,GAAG,AAAC,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,WAAW,GAC5C,IAAI,CAAC,GAAG,GACR,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC/B,CAAC,CAAA;GACH,CAAC,CAAA;;AAEF,SAAO,KAAK,CAAA;CACb;;;;;;;;;AASD,SAAS,cAAc,CAAC,GAAG,EAAyB;MAAvB,IAAI,yDAAG,YAAY,EAAE;;AAChD,SAAO,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;CACvD;;;;;;;;AAQD,SAAS,eAAe,GAAwB;MAAvB,IAAI,yDAAG,YAAY,EAAE;;AAC5C,MAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AAC5B,SAAO,WAAW,CAChB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CACxB,CAAA;CACF;;;;;;;;AAQD,SAAS,WAAW,CAAC,GAAG,EAAE;AACxB,MAAI,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAC1B,OAAO,IAAI,CAAA;;AAEb,SAAO,GAAG,CAAC,IAAI,MAAM,EAAE,CAAC,OAAO,CAAC;AAC9B,OAAG,EAAE,CAAC;AACN,OAAG,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC;GACpB,CAAC,CAAC,CAAA;CACJ","file":"o3o.js","sourcesContent":["//         _____     \n//   ____ |__  /____ \n//  / __ \\ /_ </ __ \\\n// / /_/ /__/ / /_/ /\n// \\____/____/\\____/ \n//\n// @brief: a ascii emoticon generator based on Node.js\n// @author: [turingou](http://guoyu.me)\n\nimport change from 'change'\nimport { yans as list } from '../yan.json'\n\n/**\n*\n* o3o\n* @type[String]: the given type of emoticons\n*\n**/\nexport default function o3o(type) {\n  var emoticons = mapEmoticons()\n\n  if (!type) \n    return Object.keys(emoticons)\n\n  if (type === 'random' || type === '*') \n    return randomEmoticons(emoticons)\n\n  if (!checkAvailable(type, emoticons)) \n    return null\n\n  return fetchRandom(emoticons[type])\n}\n\n/**\n*\n* Make a emoticons map from source JSON file `yan.json`\n*\n**/\nfunction mapEmoticons() {\n  var Store = {}\n\n  yans.forEach(line => {\n    line.tag.split(' ').forEach(tag => {\n      Store[tag] = (typeof Store[tag] == 'undefined') ?\n        line.yan :\n        Store[tag].concat(line.yan);\n    })\n  })\n\n  return Store\n}\n\n/**\n*\n* Check if given key is available in given Object.\n* @key[String]\n* @list[Object]\n*\n**/\nfunction checkAvailable(key, list = mapEmoticons()) {\n  return Object.prototype.hasOwnProperty.call(list, key)\n}\n\n/**\n*\n* Fetch a random emoticon.\n* @list[Object]: the emoticons map.\n*\n**/\nfunction randomEmoticons(list = mapEmoticons()) {\n  var tags = Object.keys(list)\n  return fetchRandom(\n    list[fetchRandom(tags)]\n  )\n}\n\n/**\n*\n* Fetch a random element from a array\n* @src[Array]: a array contains different elements.\n*\n**/\nfunction fetchRandom(src) {\n  if (!src || src.length === 0) \n    return null\n\n  return src[new chance().integer({\n    min: 0,\n    max: src.length - 1\n  })]\n}\n"]}